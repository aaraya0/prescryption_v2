from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import time

# ‚úÖ Configuraci√≥n de Selenium
options = webdriver.ChromeOptions()
# Descomentar esta l√≠nea si no quieres que se abra el navegador
# options.add_argument("--headless")  
options.add_argument("--disable-gpu")
options.add_argument("--window-size=1920x1080")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)

try:
    # üîç 1. Abre la p√°gina
    url = "https://www.argentina.gob.ar/precios-de-medicamentos"
    print(f"üîç Abriendo la p√°gina: {url}")
    driver.get(url)

    # Esperar un momento para cargar la p√°gina completamente
    time.sleep(5)

    # üßê Buscar iframes en la p√°gina
    iframes = driver.find_elements(By.TAG_NAME, "iframe")
    print(f"üßê N√∫mero de iframes detectados: {len(iframes)}")

    if len(iframes) == 0:
        print("‚ùå No se detectaron iframes. La estructura de la p√°gina pudo haber cambiado.")
    else:
        for index, iframe in enumerate(iframes):
            print(f"üîÑ Probando con el iframe {index + 1}")
            driver.switch_to.frame(iframe)
            time.sleep(2)  # Dar tiempo para que cargue

            # Verificar si el input de b√∫squeda est√° en este iframe
            try:
                search_input = driver.find_element(By.ID, "searchInput")
                print(f"‚úÖ Input encontrado en iframe {index + 1}")
                break  # Si encontramos el input, salimos del bucle
            except Exception:
                print(f"‚ùå No se encontr√≥ el input en el iframe {index + 1}")
                driver.switch_to.default_content()  # Regresar al contenido principal

    # üìù 2. Buscar el campo de b√∫squeda
    try:
        search_input = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "searchInput"))
        )
        print("‚úÖ Input de b√∫squeda encontrado y listo para interactuar.")
    except Exception:
        print("‚ùå No se pudo encontrar el campo de b√∫squeda.")
        input("üîç Presiona ENTER para cerrar el navegador...")
        driver.quit()
        exit()

    # üìù 3. Ingresar medicamento en el campo de b√∫squeda
    medicamento = input("Ingrese el nombre del medicamento: ").strip()
    print(f"üîç Buscando informaci√≥n para: {medicamento}")

    search_input.clear()
    search_input.send_keys(medicamento)
    search_input.send_keys(Keys.RETURN)  # Simular presionar ENTER
    print("‚úÖ Se escribi√≥ en el input y se envi√≥ la b√∫squeda.")

    # ‚è≥ Esperar los resultados
    time.sleep(3)  # Pausa para que carguen los datos

    # üìå 4. Extraer los datos de la tabla de medicamentos
    medicamentos = []
    filas = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")

    if not filas:
        print(f"‚ö†Ô∏è No se encontraron coincidencias para '{medicamento}'.")
    else:
        for fila in filas:
            columnas = fila.find_elements(By.TAG_NAME, "td")
            if len(columnas) >= 3:
                nombre = columnas[0].text.strip()
                precio_farmacia = columnas[1].text.strip()
                precio_pami = columnas[2].text.strip()

                # Buscar el bot√≥n "Ver m√°s" dentro de la fila
                try:
                    ver_mas_button = fila.find_element(By.TAG_NAME, "button")
                    driver.execute_script("arguments[0].click();", ver_mas_button)
                    print(f"üîç Obteniendo informaci√≥n adicional de: {nombre}")

                    # Esperar a que cargue el modal con detalles
                    time.sleep(2)

                    # Extraer informaci√≥n adicional
                    try:
                        modal_body = WebDriverWait(driver, 5).until(
                            EC.presence_of_element_located((By.CLASS_NAME, "modal-body"))
                        )
                        detalles = modal_body.text
                        print(f"‚úîÔ∏è Informaci√≥n adicional: {detalles}")

                        medicamentos.append({
                            "nombre": nombre,
                            "precio_farmacia": precio_farmacia,
                            "precio_pami": precio_pami,
                            "detalles": detalles
                        })

                        # Cerrar el modal si el bot√≥n existe
                        try:
                            close_buttons = driver.find_elements(By.CLASS_NAME, "close")
                            if close_buttons:
                                driver.execute_script("arguments[0].click();", close_buttons[0])
                                print(f"‚úÖ Modal cerrado para {nombre}")
                            else:
                                print(f"‚ö†Ô∏è No se encontr√≥ bot√≥n de cerrar para {nombre}. Probablemente se cerr√≥ solo.")

                        except Exception as e:
                            print(f"‚ö†Ô∏è Error al cerrar el modal de {nombre}: {e}")

                    except Exception as e:
                        print(f"‚ö†Ô∏è No se pudo obtener detalles de {nombre}: {e}")

                except Exception as e:
                    print(f"‚ö†Ô∏è No se encontr√≥ bot√≥n 'Ver m√°s' en {nombre}: {e}")

        # Mostrar los resultados obtenidos
        print("‚úîÔ∏è Resultados obtenidos:")
        for med in medicamentos:
            print(f"- {med['nombre']} | Precio Farmacia: {med['precio_farmacia']} | Precio PAMI: {med['precio_pami']}")
            print(f"  üìå Detalles: {med['detalles']}")

except Exception as e:
    print(f"‚ùå Error durante el scraping: {e}")

finally:
    input("üîç Presiona ENTER para cerrar el navegador...")
    driver.quit()  # Cerrar el navegador
